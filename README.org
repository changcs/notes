* Changcs 的 Notes
一些個人的筆記。

#+BEGIN_QUOTE
測試引用一。

測試引用二， *粗體字測試，使用OK。* 以後再更新。

  -- [[https://github.com/changcs][changcs]] [[file:pic/author.jpg]]
#+END_QUOTE


* 在 Beaglebone Black上測試openocd

步驟如下

** Clone openocd (正在試commit  cb317eabf2d162365467aeb89b564828e5e6d6f3)

#+BEGIN_QUOTE
git clone git://git.code.sf.net/p/openocd/code openocd-code.git
#+END_QUOTE

** Building openocd

1. run =./bootstrap=

2. run =./configure --help=

3. run =./configure --enable-jlink=

4. run =make=

** Hooking up the JTAG Adapter

1. connect Jlink JTAG cable to DUT

2. connect Jlink to PC with USB cable. You can use =lsusb= command to check.

3. power on the target board.

4. run =openocd=

#+BEGIN_QUOTE
cd tcl;

../src/openocd -f interface/jlink.cfg -f board/ti_beaglebone_black.cfg -c "init; halt"
#+END_QUOTE

** Talk with the OpenOCD server using telnet

Test via telnet interface and use =reg= command to display registers

#+BEGIN_QUOTE
$ telnet 127.0.0.1 4444
#+END_QUOTE

** Building U-Boot

若要進行 =JTAG= 除錯, 需要從 =u-boot= 關掉 =watchdog timer= 。 方法如下: 找出 =ti_am335x_common.h= 裏面 =WATCHDOG= 的 =define= ，改為 =undef= 。

#+BEGIN_EXAMPLE
make am335x_boneblack_defconfig

ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make
#+END_EXAMPLE

** 製作 U-Boot 的 SD 啟動卡 方法一

劃分一個 vfat partition 在 2048 sector 處，長度 128MB。
並設定成 bootable partition 。

#+BEGIN_QUOTE
 mkfs.vfat -F 32 -n boot /dev/sdX1

 mount /dev/sdX1 /mnt

 cp MLO u-boot.img /mnt

 umount /mnt
#+END_QUOTE

** 製作 U-Boot 的 SD 啟動卡 方法二

這是 Arch Linux 建議的方法。

#+BEGIN_QUOTE
 dd if=/dev/zero of=/dev/sdX bs=1M count=8

 fdisk to create an empty partition table and a ext4 FS after 2048 sectors

 dd if=MLO of=/dev/sdX count=1 seek=1 conv=notrunc bs=128k

 dd if=u-boot.img of=/dev/sdX count=2 seek=1 conv=notrunc bs=384k
#+END_QUOTE

** 安裝 Arch Linux

參考 [[https://archlinuxarm.org/platforms/armv7/ti/beaglebone-black][BeagleBone Black | Arch Linux ARM]]。

** [[http://github.com/beagleboard/linux][Getting kernel source code]]

- 若要使用 JTAG debug linux kernel，要加上[[https://github.com/maximeh/buildroot/blob/master/board/beaglebone/patches/linux/0001-keep-jtag-clock-alive-for-debugger.patch][patch]]。

- 確定開啟 =CONFIG_DEBUG_INFO=

#+BEGIN_EXAMPLE
git clone git://github.com/beagleboard/linux.git

cd linux

git checkout 4.4

make V=1 distclean

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- V=1 bb.org_defconfig

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- V=1 zImage dtbs modules

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=/new/prefix modules_install
#+END_EXAMPLE

假設 TFTP server 的 IP 是 192.168.1.1。
把 =arch/arm/boot/zImage= 和 =arch/arm/boot/dts/am335x-boneblack.dtb= 放到
TFTP directory 之後，接上網路線，用以下 =u-boot= 命令開機。

#+BEGIN_EXAMPLE
dhcp ${loadaddr} 192.168.1.1:zImage

tftpboot ${fdtaddr} 192.168.1.1:am335x-boneblack.dtb

setenv bootargs "console=ttyO0,115200n8 coherent_pool=1M root=/dev/mmcblk1p1 rw rootwait fixrtc"

bootz $loadaddr - $fdtaddr
#+END_EXAMPLE

** Talk with the OpenOCD server using gdb

建議使用 =emacs= 的 =gud-gdb mode= 。接下來可以使用 =step= , =next= , =until= 這些命令來除錯。

要看目前的 =call stack= , 可以使用 =info stack= 或是 =frame= 命令。

#+BEGIN_EXAMPLE
$ arm-none-eabi-gdb --fullname vmlinux

(gdb) target extended-remote :3334

(gdb) hbreak start_kernel

(gdb) continue

u-boot> dhcp ${loadaddr} 192.168.1.1:zImage

u-boot> tftpboot ${fdtaddr} 192.168.1.1:am335x-boneblack.dtb

u-boot> setenv bootargs "console=ttyO0,115200n8 coherent_pool=1M root=/dev/mmcblk1p1 rw rootwait fixrtc"

u-boot> bootz $loadaddr - $fdtaddr
#+END_EXAMPLE


** 參考資料

- [[http://jexbat.com/2016/BBB-Uboot/][BeagleBone Black 从零到一 2 MLO、U-Boot]]
- [[http://www.twam.info/hardware/beaglebone-black/u-boot-on-beaglebone-black][U-Boot on BeagleBone Black]]
- [[http://processors.wiki.ti.com/index.php/AM335x_U-Boot_User's_Guide#U-Boot][AM335x U-Boot User's Guide]]
- [[http://jexbat.com/2016/BBB-Prepare-booting/][BeagleBone Black 从零到一 (3 Linux 镜像、initramfs、Device Tree及根文件系统)]]
- [[http://elinux.org/Beagleboard:BeagleBoneBlack_Rebuilding_Software_Image][Beagleboard:BeagleBoneBlack Rebuilding Software Image]]
- [[https://archlinuxarm.org/platforms/armv7/ti/beaglebone-black][BeagleBone Black | Arch Linux ARM]]


* Openwrt and Beaglebone Black

[[https://github.com/nc543][nc543]] mentioned [[https://github.com/nc543/openwrt-bbb/wiki/Official-OpenWrt-Support-BeagleBone-Black][Official OpenWrt Support BeagleBone Black]].
When the menu appear, select Target System as ~TI OMAP3/4/AM33xx~,
Target Profile as ~TI AM335x BeagleBone Black~.

** Image Configuration

More details can be found [[https://openwrt.org/docs/guide-developer/build-system/use-buildsystem][here]]. Actions:

1. run ~./scripts/feeds update -a~
2. run ~./scripts/feeds install -a -f~
3. run ~make menuconfig~ and set target
4. run ~make defconfig~ to set default config for build system and device
5. run ~make kernel_menuconfig~ (optional)
6. run ~make menuconfig~ and modify set of package
7. run ~make download~
8. run ~./scripts/diffconfig.sh~

** Building Images

#+BEGIN_QUOTE
ionice -c 3 nice -n19 make V=cs
#+END_QUOTE

** Writing the image to micro SD card

#+BEGIN_EXAMPLE
zcat bin/targets/omap/generic/openwrt-omap-ti_am335x-bone-black-ext4-sdcard.img.gz | sudo dd of=/dev/sdX bs=4096 conv=fsync
#+END_EXAMPLE

** Boot Up Beaglebone Black

Plug the SD card into BeagleBone Black, then power on BeagleBone Black with the BOOT button (S2) pressed to boot from SD.


* Working with Gentoo

[[https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation][AMD64 Installation Guide]]

** Synchronization

#+BEGIN_QUOTE
emerge --sync # or

emerge-webrsync

emerge --ask --verbose --update --deep --with-bdeps=y --newuse @world
#+END_QUOTE


** Add user into groups

From [[https://wiki.gentoo.org/wiki/Knowledge_Base:Adding_a_user_to_a_group][Adding a user to a group - Gentoo Wiki]]

#+BEGIN_QUOTE
root # gpasswd -a larry wheel
#+END_QUOTE


** Automatic kernel module loading

#+BEGIN_QUOTE
root # mkdir -p /etc/modules-load.d
root # nano -w /etc/modules-load.d/network.conf
#+END_QUOTE


** Layman and overlay

1. Install ~layman~ by

#+BEGIN_QUOTE
USE="git" emerge -av app-portage/layman

layman -L
#+END_QUOTE

2. [@2] ~git clone~ my gentoo-zh overlay into ~git-local~ by

#+BEGIN_QUOTE
git clone https://github.com/changcs/gentoo-zh.git gentoo-zh.git
#+END_QUOTE

3. [@3] Apply ~temp gentoo-zh2~ stash

4. Add my ~gentoo-zh~ overlay

#+BEGIN_QUOTE
layman -o file:///home/changcs/git-local/gentoo-zh.git/repo.xml -f -a gentoo-zh2
#+END_QUOTE


** Remap Alt and Ctrl in virtual console

1. Set ~windowkeys=NO~ in ~/etc/conf.d/keymaps~.

2. Create ~personal.map.gz~ by revising ~/usr/share/keymaps/i386/qwerty/us.map.gz~.

3. Set ~keymap=personal~ in ~/etc/conf.d/keymaps~.


** Enable ssh root login

1. Set ~PermitRootLogin~ to ~yes~ in ~/etc/ssh/sshd_config~.


** Enable X Forwarding Over SSH

From [[http://linuxg.net/how-to-enable-x-forwarding-over-ssh-on-gentoo-server/][How to Enable X Forwarding Over SSH on Gentoo Server]].
Enable ~X11Forwarding~ in ~/etc/ssh/sshd_config~

#+BEGIN_QUOTE
X11Forwarding yes
/etc/init.d/sshd reload
#+END_QUOTE


** How to make prompt with git branch in bash gentoo

1. Reference [[https://gist.github.com/d4rk5eed/d1651aa46e42d91ef96f][How to make prompt with git branch in bash gentoo]]

2. 

#+BEGIN_EXAMPLE
emerge -av app-shells/bash-completion

find /usr -name git-prompt.sh.bz2

cp /usr/share/doc/git-1.8.5.5/git-prompt.sh.bz2 ~

bunzip2 git-prompt.sh.bz2

mv git-prompt.sh .git-prompt.sh

Paste into ~/.bashrc

# Bash completion
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

export PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[01;33m\]$(__git_ps1)\[\033[01;34m\] \$\[\033[00m\] '
export GIT_PS1_SHOWDIRTYSTATE=1

source ~/.git-prompt.sh
#+END_EXAMPLE


** lftp not support sftp can be fixed by emerging gnutls lib

URL will be provided later.


** Disk Quotas

Browse [[https://wiki.gentoo.org/wiki/User:Gavlee/Draft:Disk_Quotas][Disk Quotas]]


** LVM setup

#+BEGIN_EXAMPLE
emerge -av sys-fs/lvm2

cat sys-fs/lvm2 lvm2create_initrd readline > /etc/portage/package.use/lvm2

pvdisplay

# cfdisk to create a dos extended partition at/dev/sdd6

pvcreate /dev/sdd6

vgcreate home_vg /dev/sdd6

vgdisplay

lvcreate -l 100%FREE -n home home_vg

ls -l /dev/home_vg
home -> ../dm-2

mkfs.ext4 /dev/home_vg/home

mount -t ext4 /dev/home_vg/home /home3

#+END_EXAMPLE


** Portage Local Mirror

Browse [[https://wiki.gentoo.org/wiki/Local_Mirror][Portage Local Mirror]]


** Screenshot Using Command Line

#+BEGIN_EXAMPLE
sleep 5; xwd -root | xwdtopnm | pnmtopng > capture.png
#+END_EXAMPLE


** VirtualBox

Browse [[https://wiki.gentoo.org/wiki/VirtualBox][Gentoo VirtualBox]]

#+BEGIN_EXAMPLE
echo "app-emulation/virtualbox-bin PUEL" >> /etc/portage/package.license/virtualbox-bin

emerge -av app-emulation/virtualbox-bin

gpasswd -a <user> vboxusers
#+END_EXAMPLE


** Unmasking a package

Browse [[https://wiki.gentoo.org/wiki/Knowledge_Base:Unmasking_a_package][Gentoo Knowledge Base:Unmasking a package]]


** Hacking a software

Browse [[https://forums.gentoo.org/viewtopic-t-1058144-start-0.html][Emerge Strategy when hacking a software]]

#+BEGIN_EXAMPLE
When I want to hack a package for which an ebuild exists (say foo-x.y.z.ebuild), this is what I do.

Code:
ebuild /usr/portage/path-to-the-ebuild/foo-x.y.z.ebuild prepare

Go to the extracted source directory:
Code:
cd /tmp/portage/path-to-the-ebuild/foo-x.y.x/work
and there I edit, hack, etc. the sources.
Then I use the command merge to compile the hacked sources and install:
Code:
ebuild  /usr/portage/path-to-the-ebuild/foo-x.y.z.ebuild merge
Everything is installed in the proper places.
I can uninstall with the command ebuild ... unmerge.
#+END_EXAMPLE


** Basic guide to write Gentoo Ebuilds

Browse [[https://wiki.gentoo.org/wiki/Basic_guide_to_write_Gentoo_Ebuilds][Basic guide to write Gentoo Ebuilds]]


* Emacs and Org mode Tips

** [[https://github.com/TommyX12/company-tabnine][A company-mode backend for TabNine]]
** [[https://www.reddit.com/r/emacs/comments/cdei4p/failed_to_download_gnu_archive_bad_request/][Failed to download gnu archive]]
** [[https://docplayer.net/95762692-Exwm-emacs-x-windows-manager.html][EXWM: Emacs X Windows Manager pdf]]
** [[https://irreal.org/blog/?p=8008][Drawing Figures in Math Lectures]] and [[https://inkscape.org/][Inkscape]]
** [[https://linuxhint.com/documents_emacs_org_mode/][Make beautiful documents from Emacs ORG-Mode]]
** [[https://yiufung.net/post/org-mode-hidden-gems-pt4/][Org-mode Hidden Gems - 04 TODO Items]]
** [[https://irreal.org/blog/?p=8016][Introduction to Spacemacs]]


* HDL

** [[https://www.nand2tetris.org/][nand2tetris]]


** [[https://coldnew.github.io/7004ff00/#org710b9aa][coldnew blog: zybo board 開發記錄: 硬體認識]]


** PyHDL

Browse [[https://www.youtube.com/watch?v=LSgOpvr8FII][PyConTW 2013: MyHDL designing digital hardware with Python by Jan Decaluwe]]


